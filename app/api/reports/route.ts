import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/app/libs/mongodb';
import Report from '@/app/libs/models/Report';
import User from '@/app/libs/models/User';

export async function GET(request: NextRequest) {
  try {
    await connectDB();

    const { searchParams } = new URL(request.url);
    const reportType = searchParams.get('reportType');
    const generatedBy = searchParams.get('generatedBy');
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const skip = (page - 1) * limit;

    const query: Record<string, unknown> = {};

    if (reportType) {
      query.reportType = reportType;
    }

    if (generatedBy) {
      query.generatedBy = generatedBy;
    }

    const reports = await Report.find(query)
      .populate('generatedBy', 'firstName lastName email')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    const total = await Report.countDocuments(query);

    return NextResponse.json({
      reports,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    });

  } catch (error) {
    console.error('Get reports error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    await connectDB();

    const {
      reportType,
      title,
      description,
      generatedBy,
      dateRange,
      data
    } = await request.json();

    if (!reportType || !title || !generatedBy || !dateRange || !data) {
      return NextResponse.json(
        { error: 'Report type, title, generated by, date range, and data are required' },
        { status: 400 }
      );
    }

    // Verify the generator exists
    const generator = await User.findById(generatedBy);

    if (!generator) {
      return NextResponse.json(
        { error: 'Generator not found' },
        { status: 404 }
      );
    }

    // Create new report
    const newReport = new Report({
      reportType,
      title,
      description,
      generatedBy,
      dateRange,
      data,
      status: 'Generated',
      downloadCount: 0
    });

    await newReport.save();

    return NextResponse.json({
      message: 'Report created successfully',
      report: newReport
    }, { status: 201 });

  } catch (error) {
    console.error('Create report error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
